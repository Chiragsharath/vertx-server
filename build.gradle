/*
 * Grade build file to generate builds for onemilestone API server
 *
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}

group 'vertx-server'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

repositories {
    jcenter()
    mavenCentral()
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''Plianced Server:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

shadowJar {
    manifest {
        attributes 'Implementation-Title': 'Plianced Server',
                'Implementation-Version': version,
                'Main-Class': 'com.ka09solutions.ServerVerticle'
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/services'
    }
}

ext.vertxVersion = '3.5.2'

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.12'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'

    compile 'io.vertx:vertx-core:' + vertxVersion
    compile 'io.vertx:vertx-web:' + vertxVersion
    compile 'io.vertx:vertx-jdbc-client:' + vertxVersion
    compile 'io.vertx:vertx-sql-common:' + vertxVersion
    compile 'io.vertx:vertx-web-client:' + vertxVersion
    //compile 'io.vertx:vertx-auth-jwt:' + vertxVersion

    compile 'io.jsonwebtoken:jjwt-api:0.10.5'
    runtime 'io.jsonwebtoken:jjwt-impl:0.10.5', 'io.jsonwebtoken:jjwt-jackson:0.10.5'

    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-fileupload:commons-fileupload:1.3.1'

    compile 'com.google.code.gson:gson:2.3.1'
    compile 'mysql:mysql-connector-java:8.0.11'
    compile 'com.cloudinary:cloudinary-http44:1.2.2'

    compile 'org.apache.velocity:velocity:1.7'

    compile 'org.elasticsearch:elasticsearch:1.7.4'
    compile 'org.apache.lucene:lucene-expressions:4.10.4'

    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'com.google.guava:guava:19.0'

    compile group: 'org.jooq', name: 'jool', version: '0.9.11'

    compile 'org.apache.poi:poi:3.12'
    compile 'org.apache.poi:poi-ooxml:3.12'
    compile group: 'us.monoid.web', name: 'resty', version: '0.3.2'
    

    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile 'io.vertx:vertx-unit:' + vertxVersion
}
